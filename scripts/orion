#!/bin/bash
# Title: orion
# Description: Load balancer for Artemis NTVM. Orion monitors the Artemis queue and scans files as worker slots become available
# Version: 1.00.00
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Andrew Withers (atw127@psu.edu, atw31337@gmail.com)

CONF=/etc/artemis.conf

exec 2> /var/log/artemis.err

sendAlert() {
TFILE=$(mktemp -p /tmp/artemis/) # Temporary file for alert email output
printf "From: %s\nTo: %s\nSubject: Malware Detected!\n\n" "$HOSTNAME" "$EMAIL"  > "$TFILE"
printf "%s: %s has detected malware on the network.\n " "$TSTAMP" "$HOSTNAME" >> "$TFILE"
printf "SHA256: %s\n" "$HASH" >> "$TFILE"
if [[ -n $IDIR ]]; then
         printf "A copy of the infected file(s) can be located in %s\n" "$IDIR" >> "$TFILE"
fi
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID=$LOGSID;" >> "$TFILE"
if [[ -e /opt/artemis/cache/$HASH ]]; then
        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID IN ($IDLIST);" >> "$TFILE"
fi
sendmail -vt < "$TFILE"
rm -f "$TFILE"
}

file_integrity_chk() {         # checks and, if necessary, waits for a file to finish being written to disk
local hash
while [[ $(sha256sum "$1" | cut -d' ' -f1) != $hash ]]; do
        hash=$(sha256sum "$1" | cut -d' ' -f1)
        sleep 0.1
done
}

autoStop() {
service artemis stop && pkill -9 clamscan
printf "%s: Low memory detected! Emergency stop sequence activated." "$(date)" >> /var/log/artemis.err
exit
}

getSrcDst() {
# Check the current log
if [[ -e /nsm/bro/logs/current/files.log ]]; then
        SOURCE=$(grep "$FILENAME" /nsm/bro/logs/current/files.log | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
        DEST=$(grep "$FILENAME" /nsm/bro/logs/current/files.log | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
fi

# If the Source/Destination are not located there, check the most recently archived log file
if [[ -z $SOURCE ]] || [[ -z $DEST ]]; then
        # Find latest archived directory
        ARCHIVEDIR=$(ls -t /nsm/bro/logs/ | grep -v current | grep -v stats | head -n1)
        if [[ -n $ARCHIVEDIR ]]; then
                # Find latest archived files.log
                ARCHIVE=$(ls -t /nsm/bro/logs/"$ARCHIVEDIR"/ | grep files | head -n1)
                if [[ -f /nsm/bro/logs/$ARCHIVEDIR/$ARCHIVE ]]; then
                        # Copy the file as a temp file to avoid multiple processes from attempting to access the file at the same time
                        TEMPID=$(date +%s%N)
                        file_integrity_chk "/nsm/bro/logs/$ARCHIVEDIR/$ARCHIVE" # Ensure that the file has been completely written to disk during log rotation before proceeding
                        cp /nsm/bro/logs/"$ARCHIVEDIR"/"$ARCHIVE" /tmp/artemis/"$TEMPID".temp.gz
                        gzip -d /tmp/artemis/"$TEMPID".temp.gz
                        SOURCE=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
                        DEST=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
                        rm /tmp/artemis/"$TEMPID".temp
                else
                        # During the first hour of the day the archive files will be stored in the second to newest archive directory
                        ARCHIVEDIR=$(ls -t /nsm/bro/logs/ | grep -v current | grep -v stats |head -n2 | tail -n1)
                        if [[ -n $ARCHIVEDIR ]]; then
                                # Find latest archived files.log
                                ARCHIVE=$(ls -t /nsm/bro/logs/"$ARCHIVEDIR"/ | grep files | head -n1)
                                if [[ -f /nsm/bro/logs/"$ARCHIVEDIR"/"$ARCHIVE" ]]; then
                                        # Copy the file as a temp file to avoid multiple processes from attempting to access the file at the same time
                                        TEMPID=$(date +%s%N)
                                        file_integrity_chk "/nsm/bro/logs/$ARCHIVEDIR/$ARCHIVE" # Ensure that the file has been completely written to disk during log rotation before proceeding
                                        cp /nsm/bro/logs/"$ARCHIVEDIR"/"$ARCHIVE" /tmp/artemis/"$TEMPID".temp.gz
                                        gzip -d /tmp/artemis/"$TEMPID".temp.gz
                                        SOURCE=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
                                        DEST=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
                                        rm /tmp/artemis/"$TEMPID".temp
                                fi
                        fi
                fi
        fi
fi

# If the Source/Destination are not located in the archived log either, then wait for the data to be written to the current log
if [[ -z $SOURCE ]] || [[ -z $DEST ]]; then
        for (( i=0; i < 300; i++ )); do # For loop prevents infinite loops caused by log rotation
                local counter=0
		while ! [[ -e /nsm/bro/logs/current/files.log ]]; do       # Prevents missing file errors during log rotation
                                sleep 0.1
				((counter++))
				if [[ $counter -ge 300 ]]; then
					break 2
				fi
                done
		SOURCE=$(grep "$FILENAME" /nsm/bro/logs/current/files.log | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
                DEST=$(grep "$FILENAME" /nsm/bro/logs/current/files.log | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
                if [[ -z $SOURCE ]] || [[ -z $DEST ]]; then
                	sleep 1
                else
                	break
                fi
        done
fi
}

filescan()
{
	HASH=$(sha256sum "$1" | awk '{ print $1 }')
	FILENAME=$(basename "$1") # File name only
	EXITTIME="$(date +%s).$(date +%N | head -c3)"
	QTIME=$(echo "scale=3; $EXITTIME - $ENTRYTIME" | bc)
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET QTime=$QTIME WHERE EntryID=$LOGSID;"
	HASHID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache WHERE Hash='$HASH' LIMIT 1;")
	if [[ -z $HASHID ]]; then	# Hash does not exist in the Cache Table
		HASHID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO Cache (Hash, Hits, TimeStamp) VALUES ('$HASH', 1, $(date +%s%N)); SELECT LAST_INSERT_ID();")
		SCANNED=1
		TLOG=$(mktemp -p /tmp/artemis/)  # Temporary storage for log output
		date > "$TLOG"
		clamscan "$1" >> "$TLOG"
		RESULT=$?
		# Add the result of the scan to the Cache table
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Cache SET Result=$RESULT WHERE HashID=$HASHID;"
		# Release the worker slot in the workers pid directory
		rm /opt/artemis/cache/workers/$BASHPID.pid
		SCANTIME=$(grep Time "$TLOG" | awk '{print $2}')
		getSrcDst
		# Update the Logs table with the data from the scanned file
                mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=$SCANNED, Result=$RESULT, ScanTime=$SCANTIME, \
                Source='$SOURCE', Destination='$DEST' WHERE EntryID=$LOGSID;"
                # If a duplicate hash file exists add the result to the Logs entries contained in the file
                if [[ -e /opt/artemis/cache/$HASH ]]; then
                	# Find number of LogsIDs listed in the duplicate hash file
			NUMIDS=$(wc -l < "/opt/artemis/cache/$HASH")
			if  [[ $NUMIDS -gt 1 ]]; then
				# Create an EntryID list to be used in queries
                        	while read LINE; do
                        		if [[ -z $IDLIST ]]; then
                                		IDLIST="$LINE"
                                	else
                                		IDLIST+=",$LINE"
                                	fi
                        	done </opt/artemis/cache/"$HASH"
                        	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID IN ($IDLIST);"
			else
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$(cat /opt/artemis/cache/$HASH);"
			fi
                fi
		if [[ $RESULT -eq 1 ]]; then    #An exit code of 1 indicates that an infection has been detected.
			# If Artemis has been configured to move infected files then move the file to the appropriate directory
			if [[ -n $IDIR ]]; then
				if [[ -e /opt/artemis/cache/$HASH ]]; then
                                	# Move each copy of the infected file to the appropriate directory
                                	while read LINE; do
                                        	IFILE=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName FROM Logs WHERE EntryID=$$LINE;")
                                               	mv "$DIR$IFILE" "$IDIR$IFILE"
                                               	chmod 600 "$IDIR$IFILE"
                                        done </opt/artemis/cache/"$HASH"
                                fi
                                mv "$1" "$IDIR$FILENAME"
                                chmod 600 "$IDIR$FILENAME"
			fi
			sendAlert
		fi
		if [[ -e /opt/artemis/cache/$HASH ]]; then
                	rm /opt/artemis/cache/"$HASH"
                fi
		printf "SHA256: %s\n" "$HASH" >> "$TLOG"
		printf "Received: %s\n\n" "$TSTAMP" >> "$TLOG"
		cat "$TLOG" >> /var/log/virus-scan.log
		rm  "$TLOG"
		# Cache table maintenance
		# Remove any existing duplicate hashes
		DUPHASH=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Hash FROM Cache GROUP BY Hash HAVING COUNT(*) > 1 LIMIT 1;")
                while [[ -n $DUPHASH ]]; do
			DEL=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache WHERE Hash='$DUPHASH' LIMIT 1;")
			mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE HashID=$DEL;"
                        DUPHASH=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Hash FROM Cache GROUP BY Hash HAVING COUNT(*) > 1 LIMIT 1;")
		done
		# Remove entries that contain an error result.
                        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Result=2;"
		# If the cache is larger than the max cache size, delete hashes based on the greatest time interval since last hit
		while [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM Cache;") -gt $MAXHASH ]]; do
			DEL=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache ORDER BY TimeStamp ASC LIMIT 1;")
			mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE HashID=$DEL;"
		done
	else	# Hash is present in the Cache table
		# Release the worker slot in the workers pid directory
		rm /opt/artemis/cache/workers/$BASHPID.pid
		SCANNED=0
		getSrcDst
		# Update the Logs and Cache table entries
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=$SCANNED, Source='$SOURCE', Destination='$DEST' WHERE EntryID=$LOGSID;"
                mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Cache SET Hits=Hits+1, TimeStamp=$(date +%s%N) WHERE HashID=$HASHID;"
		# Get the result from the Cache table
		RESULT=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Result FROM Cache WHERE HashID=$HASHID;")
		if [[ $RESULT == "NULL" ]]; then
			echo "$LOGSID" >> /opt/artemis/cache/"$HASH"
		else	# Result is present in the Cache table
			## Update the result in the Logs table
			mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$LOGSID;"
			if [[ $RESULT -eq 1 ]]; then
				if [[ -n $IDIR ]]; then
					mv "$DIR$FILENAME" "$IDIR$FILENAME"
					chmod 600 "$IDIR$FILENAME"
				fi
				sendAlert
			fi
		fi
	fi
}

# Check that the configuration file exists
if [[ ! -f $CONF ]]; then
        echo Orion: Configuration file does nost exist!
        exit 1
fi

# Get variables from artemis.conf
DIR=$(grep SDIR "$CONF" | cut -d'=' -f2)
EMAIL=$(grep EMAIL "$CONF" | cut -d'=' -f2)
IDIR=$(grep IDIR "$CONF" | cut -d'=' -f2)
MAXPROC=$(grep MAXPROC "$CONF" | cut -d'=' -f2)
MAXHASH=$(grep MAXHASH "$CONF" | cut -d'=' -f2)

# Check that all variables contain values
if [[ -z "$MAXPROC" ]] || [[ -z "$MAXHASH" ]] || [[ -z "$EMAIL" ]] || [[ -z "$DIR" ]]; then
        echo Orion: Invalid configuration detected! Check that the conf file has been properly configured.
        exit 1
fi

for (( ; ; )); do
        if [[ $(free | head -n2 | tail -n1 | awk '{print $4}') -lt 51200 ]]; then	# If free memory drops below 50 MB Artemis, initiates an automatic stop
		autoStop
	fi
	if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM Queue;") -ne 0  ]]; then
		FILEID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileID FROM Queue ORDER BY TimeStamp ASC LIMIT 1;")
                FILE=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName FROM Queue WHERE FileID=$FILEID;")
                TSTAMP=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT TimeStamp FROM Queue WHERE FileID=$FILEID;")
                LOGSID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT LogsID FROM Queue WHERE FileID=$FILEID;")
                ENTRYTIME=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT EntryTime FROM Queue WHERE FileID=$FILEID;")
                mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Queue WHERE FileID=$FILEID;"
		while [[ $(ls -A /opt/artemis/cache/workers/ | wc -l) -ge $MAXPROC ]]; do
			sleep 0.05
		done
		filescan "$FILE" &
		# Add the worker to the workers pid directory
		touch /opt/artemis/cache/workers/$!.pid
        fi
done

exit
